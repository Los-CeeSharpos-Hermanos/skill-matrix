swagger: "2.0"
info:
  description: "This is a sample server Skill Matrix server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Skill Matrix"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "team"
  description: "Everything about Skill Matrix teams"
- name: "skill"
  description: "Access to user's skills"
- name: "language"
  description: "Access to user's languages"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /users:
    get:
      tags:
      - "user"
      summary: "List users"
      description: "Returns a list of users"
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        "201":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/GenericUser"
      security:
      - api_key: []
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/NewUser"
      responses:
        201:
          description: "successful operation"
        400:
          description: "Invalid userid supplied"
        404:
          description: "User not found"
        500:
          description: Error
          schema: 
            type: object
            example: { message: Could not add User}
          

  /users/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /users/{userid}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Update user by user id"
      description: ""
      operationId: "updateUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "User object"
        required: true
        schema:
          $ref: "#/definitions/NewUser"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid userid supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user by user id"
      description: ""
      operationId: "deleteUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "The id that needs to be deleted."
        required: true
        type: "string"
      responses:
        201:
        description: Error
        schema: 
          type: object
          example: "Could not add User"       
        "400":
          description: "Invalid userid supplied"
        "404":
          description: "User not found"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      userName:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      department:
        $ref: "#/definitions/Department"
      team:
        $ref: "#/definitions/Team"
      isPublic:
        type: "boolean"
      isAdmin:
        type: "boolean"
      createdAt:
        type: "string"
        format: "date"
      updatedAt:
        type: "string"
        format: "date"
      skills:
        type: "array"
        xml:
          name: "skill"
          wrapped: true
        items:
          $ref: "#/definitions/Skill"
      languages:
        type: "array"
        xml:
          name: "language"
          wrapped: true
        items:
          $ref: "#/definitions/Language"
      password:
        type: "string"
    xml:
      name: "User"
  
  Team: 
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      teamName:
        type: "string"
    xml:
      name: "Team"
  
          
  Skill:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      skillName:
        type: "string"
      skillRating:
         $ref: "#/definitions/Rating"
    xml:
      name: "Skill"
          
  Language:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      languageName:
        type: "string"
      languageRating:
         $ref: "#/definitions/Rating"
    xml:
      name: "Language"
      
  Rating:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
        x-type-options:
          min: 1
          max: 3
      ratingName:
        type: "string"
        enum:
          - "Begginer"
          - "Intermediate"
          - "Advanced"
        xml:
          name: "Rating"
          
  Department:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      departmentName:
        type: "string"
      departmentDescription:
        type: "string"
      createdAt:
        type: "string"
        format: "date"
      updatedAt:
        type: "string"
        format: "date"
    xml:
      name: "Deparment"
        
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"

  GenericLanguage:
    type: "object"
    properties:
      id:
        type: string
        x-chance-type: guid
      languageName:
        type: string
        enum:
          - "Deutsch"
          - "Română"
          - "Português"
          - "English"
      languageRating:
        $ref: "#/definitions/Rating"
    xml:
      name: "GenericLanguage"

  GenericSkill:
    type: "object"
    properties:
      id:
        type: string
        x-chance-type: guid
      skillName:
        type: string
        enum:
          - "C#"
          - "Javascript"
          - "Java"
          - "Fortran"
          - "HTML"
      skillRating:
         $ref: "#/definitions/Rating"
    xml:
      name: "GenericSkill"
  
  GenericTeam: 
    type: "object"
    properties:
      id:
        type: string
        x-chance-type: guid
      teamName:
        type: string
        enum:
          - CAT
          - DOG
          - TURTLE
          - RABBIT
          - TYRANNOSAURUS
    xml:
      name: "GenericTeam"

  GenericDepartment:
    type: "object"
    properties:
      id:
        type: string
        x-chance-type: guid
      departmentName:
        type: string
        enum:
          - "IT"
          - "HR"
          - "Marketing"
      departmentDescription:
        type: string
        x-chance-type: name
      createdAt:
        type: string
        x-chance-type: date
      updatedAt:
        type: string
        x-chance-type: date
    xml:
      name: "GenericDeparment"

  GenericUser:
   properties:
      id:
        type: string
        x-chance-type: guid
      userName:
        type: string
        x-chance-type: name
      firstName:
        type: string
        x-chance-type: name
      lastName:
        type: string
        x-chance-type: name
      email:
        type: string
        x-chance-type: name
      phone:
        type: string
        x-chance-type: phone
      department:
        $ref: "#/definitions/GenericDepartment"
      team:
        $ref: "#/definitions/GenericTeam"
      isPublic:
        type: string
        x-chance-type: bool
      isAdmin:
        type: string
        x-chance-type: bool
      createdAt:
        type: string
        x-chance-type: date
      updatedAt:
        type: string
        x-chance-type: date
      skills:
        type: "array"
        xml:
          name: "skill"
          wrapped: true
        items:
          $ref: "#/definitions/GenericSkill"
      languages:
        type: "array"
        xml:
          name: "genericlanguage"
          wrapped: true
        items:
          $ref: "#/definitions/GenericLanguage"
          
  
  NewUser:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      department:
        $ref: "#/definitions/Department"
      team:
        $ref: "#/definitions/Team"
      isPublic:
        type: "boolean"
      isAdmin:
        type: "boolean"
      skills:
        type: "array"
        xml:
          name: "skill"
          wrapped: true
        items:
          $ref: "#/definitions/Skill"
      languages:
        type: "array"
        xml:
          name: "language"
          wrapped: true
        items:
          $ref: "#/definitions/Language"
      password:
        type: "string"
    xml:
      name: "User"
    required:
      - firstName
      - lastName
      - email
      - phone
      - department



    
