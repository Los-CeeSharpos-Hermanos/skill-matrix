swagger: "2.0"
info:
  description: "This is a sample server Skill Matrix server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Skill Matrix"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "team"
  description: "Everything about Skill Matrix teams"
- name: "skill"
  description: "Access to user's skills"
- name: "language"
  description: "Access to user's languages"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /user:
    get:
      tags:
      - "user"
      summary: "List users"
      description: "Returns a list of users"
      operationId: "getUsers"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/GetUsers"
      security:
      - api_key: []
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      userName:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      department:
        $ref: "#/definitions/Department"
      team:
        $ref: "#/definitions/Team"
      isPublic:
        type: "boolean"
      isAdmin:
        type: "boolean"
      createdAt:
        type: "string"
        format: "date"
      updatedAt:
        type: "string"
        format: "date"
      skills:
        type: "array"
        xml:
          name: "skill"
          wrapped: true
        items:
          $ref: "#/definitions/Skill"
      languages:
        type: "array"
        xml:
          name: "language"
          wrapped: true
        items:
          $ref: "#/definitions/Language"
      password:
        type: "string"
    xml:
      name: "User"
  
  Team: 
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      teamName:
        type: "string"
    xml:
      name: "Team"
  
          
  Skill:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      skillName:
        type: "string"
      skillRating:
         $ref: "#/definitions/Rating"
    xml:
      name: "Skill"
          
  Language:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      languageName:
        type: "string"
      languageRating:
         $ref: "#/definitions/Rating"
    xml:
      name: "Language"
      
  Rating:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
        x-type-options:
          min: 1
          max: 3
      ratingName:
        type: "string"
        enum:
          - "Begginer"
          - "Intermediate"
          - "Advanced"
        xml:
          name: "Rating"
          
  Department:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      departmentName:
        type: "string"
      departmentDescription:
        type: "string"
      createdAt:
        type: "string"
        format: "date"
      updatedAt:
        type: "string"
        format: "date"
    xml:
      name: "Deparment"
        
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"

  GenericLanguage:
    type: "object"
    properties:
      id:
        type: string
        x-chance-type: guid
      languageName:
        type: string
        enum:
          - "Deutsch"
          - "Română"
          - "Português"
          - "English"
      languageRating:
        $ref: "#/definitions/Rating"
    xml:
      name: "GenericLanguage"

  GenericSkill:
    type: "object"
    properties:
      id:
        type: string
        x-chance-type: guid
      skillName:
        type: string
        enum:
          - "C#"
          - "Javascript"
          - "Java"
          - "Fortran"
          - "HTML"
      skillRating:
         $ref: "#/definitions/Rating"
    xml:
      name: "GenericSkill"
  
  GenericTeam: 
    type: "object"
    properties:
      id:
        type: string
        x-chance-type: guid
      teamName:
        type: string
        enum:
          - CAT
          - DOG
          - TURTLE
          - RABBIT
          - TYRANNOSAURUS
    xml:
      name: "GenericTeam"

  GenericDepartment:
    type: "object"
    properties:
      id:
        type: string
        x-chance-type: guid
      departmentName:
        type: string
        enum:
          - "IT"
          - "HR"
          - "Marketing"
      departmentDescription:
        type: string
        x-chance-type: name
      createdAt:
        type: string
        x-chance-type: date
      updatedAt:
        type: string
        x-chance-type: date
    xml:
      name: "GenericDeparment"

  GetUsers:
   properties:
      id:
        type: string
        x-chance-type: guid
      userName:
        type: string
        x-chance-type: name
      firstName:
        type: string
        x-chance-type: name
      lastName:
        type: string
        x-chance-type: name
      email:
        type: string
        x-chance-type: name
      phone:
        type: string
        x-chance-type: phone
      department:
        $ref: "#/definitions/GenericDepartment"
      team:
        $ref: "#/definitions/GenericTeam"
      isPublic:
        type: string
        x-chance-type: bool
      isAdmin:
        type: string
        x-chance-type: bool
      createdAt:
        type: string
        x-chance-type: date
      updatedAt:
        type: string
        x-chance-type: date
      skills:
        type: "array"
        xml:
          name: "skill"
          wrapped: true
        items:
          $ref: "#/definitions/GenericSkill"
      languages:
        type: "array"
        xml:
          name: "genericlanguage"
          wrapped: true
        items:
          $ref: "#/definitions/GenericLanguage"

    
